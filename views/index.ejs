<!DOCTYPE html>
<html>
<head>
<title>Coffee Tracker Bot</title>
</head>

<body>

<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<meta name="HandheldFriendly" content="true" />

<nav>
<h1 class="center">Coffee Tracker</h1>


<div class="right">
  <a id="hamburger" href="javascript:void(0);" class="icon" onclick=toggle_menu()>
    <i class="fa fa-bars"></i>
  </a>
<div id="options">
<button id="remove" onclick=switch_mode('remove')>Remove</button>
<button id="edit" onclick=switch_mode('edit')>Edit</button>
<button id="add" onclick=switch_mode('add')>Add</button>
<button id="fullscreen" onclick=toggle_fullscreen()>Fullscreen</button>
<button id="cancel" onclick=cancel()>Cancel</button>
</div>
</div>
</nav>

<div id="coffee_addicts"></div>

</body>

<script>

mode = "default"
fullscreen = false

function toggle_menu() {
  var x = document.getElementById("options");
  var y = document.getElementById("hamburger");
  if (x.style.display === "block") {
    x.style.display = "none";
    y.style.display = "block"
  } else {
    x.style.display = "block";
    y.style.display = "none"
  }
}

function set_color(color) {
  document.documentElement.style.setProperty("--button-background", color)
}

function toggle_fullscreen() {
fullscreen = !fullscreen
document.querySelector("#fullscreen").innerText =  fullscreen ? "Unfullscreen" : "Fullscreen"
if (fullscreen) {
document.documentElement.requestFullscreen()
} else {
document.exitFullscreen()
}
}

function switch_mode(new_mode) {
  toggle_menu()
  mode = new_mode
  set_color("#292929")
  if (mode == "remove")set_color("#ed4337")
  if (mode == "add")add(this)
  if (mode == "edit")set_color("#779ecb")
}

function cancel() {
  set_color("#292929")
  mode = "default"
  toggle_menu()
}

function edit_user(button) {
  new_username = prompt("New username? (Leave blank to keep current)")
  new_real_name = prompt("New real name? (Leave blank to keep current)")
  str = [`username=${button.username}`]
  if (new_username) str.push(`new_username=${new_username}`)
  if (new_real_name) str.push(`new_real_name=${new_real_name}`)
  if (str.length > 1) {
    POST("/api/update_user", str.join("&"), (data) => {
      if (!data.success) {error(data.error)} else {
        load()
      }
    })
  } else {
    alert("You must change at least one field!");
  }
}

function add() {
  toggle_menu()
  username = prompt("What is the username of the person you would like to add?")
  if (username == null)return
  real_name = prompt("What is the real name of the person you would like to add?")
  if (real_name == null)return
  POST("/api/new_user", `username=${username}&real_name=${real_name}`, (data) => {
    if (!data.success) {error(data.error)} else {
      load()
    }
  })
}

function remove_user(button) {
  POST("/api/delete_user", `username=${button.username}`, (data) => {
    if (!data.success) {error(data.error)} else {
      load()
    }
  })
}

function handle_click() {
  if (mode == "default") track_coffee(this)
  if (mode == "remove") remove_user(this)
  if (mode == "edit") edit_user(this)
}

function error(json) {
  Swal.fire({
    icon: 'error',
    title: 'Oops...',
    text: JSON.stringify(json)
 })
}

function track_coffee(button) {
  POST("/api/drink_coffee", `username=${button.username}`, (data) => {
    if (data.success) {
      Swal.fire({
        imageUrl: 'https://i.imgur.com/T2pMn7L.gif',
        imageAlt: 'A sizzling coffee',
        title: button.innerText,
        text: data.data.message,
        showCancelButton: true, 
        cancelButtonText: "Undo"  
      }).then((r) => {
        if (r.dismiss == "cancel") {
          POST("/api/remove_last_coffee", `username=${button.username}`, (data) => {
            Swal.fire({
              title: "Undone!"
            })
          })
        }
      })
    } else {
      error(data.error)
    }
  })
}

function GET(url, callback) {
  fetch(url)
  .then((resp) => resp.json())
  .then(function(data) {
    callback(data)
  })
}

function POST(url, data, callback) {

  fetch(url, {
    method: "POST",
    body: encodeURI(data),
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    }
  })
  .then(function(res){ return res.json(); })
  .then(function(data){ callback(data) })

}

coffee_addicts = document.getElementById("coffee_addicts")

function dynamicSort(property) {
    var sortOrder = 1;

    if(property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
    }

    return function (a,b) {
        if(sortOrder == -1){
            return b[property].localeCompare(a[property]);
        }else{
            return a[property].localeCompare(b[property]);
        }        
    }
}

function load() {
  GET("/api/users", (data) => {
    coffee_addicts.innerHTML = ""
    data.users.sort(dynamicSort("real_name"))
    data.users.map((user) => {
      if (user.hidden)return
      button = document.createElement("button")
      button.innerText = user.real_name
      button.username = user.username
      button.onclick = handle_click
      coffee_addicts.appendChild(button)
    })
  })
}

load()

</script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<style>

:root {
 --button-background: #292929; 
}

a {
  color: white;
  line-height: 0%;
  padding: 5vh 5vh;
  text-decoration: none;
  font-size: 17px;
  display: block;
  border-radius: 0px 0px 0px 10%;
}

a.icon {
  background: black;
  display: block;
  position: absolute;
  right: 0;
  top: 0;
}

a:hover {
  background-color: #bbb;
  color: black;
}

#options {
  display: none;
}

#options button {
  width: 20vw;
  font-size: 3vw;
  height: 10vh;
}

nav .center {
  width: 60%;
  margin: 0 auto;
  text-align: center;
}

nav .right {
  position: absolute;
  right: 0;
  top: 0;
}

nav button {
  height: 15vh;
  width: 20vw;
}

#remove {
  border-radius: 16px 0px 0px 0px;
  background-color: red;
}

#edit {
  background-color: blue;
  border-radius: 0;
}

#add {
  border-radius: 0;
  background-color: green;
}

#fullscreen {
  background-color: orange;
  border-radius: 0;
}

#cancel {
  border-radius: 0px 0px 0px 16px;
  background-color: teal;
}

nav {
  position: fixed;
  top: 0;
  height: 15%;
  width: 100%;
  background: linear-gradient(123deg, rgba(25,25,25,1) 0%, rgba(39,39,39,1) 100%); 
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

#coffee_addicts {
  position: absolute;
  top: 20%;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-column-gap: 1%;
  grid-row-gap: 0.5%;
}

/* thai */
@font-face {
  font-family: 'K2D';
  font-style: normal;
  font-weight: 400;
  src: local('K2D Regular'), local('K2D-Regular'), url(https://fonts.gstatic.com/s/k2d/v3/J7aTnpF2V0EjZKUsrLc.woff2) format('woff2');
  unicode-range: U+0E01-0E5B, U+200C-200D, U+25CC;
}
/* vietnamese */
@font-face {
  font-family: 'K2D';
  font-style: normal;
  font-weight: 400;
  src: local('K2D Regular'), local('K2D-Regular'), url(https://fonts.gstatic.com/s/k2d/v3/J7aTnpF2V0Ejf6UsrLc.woff2) format('woff2');
  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;
}
/* latin-ext */
@font-face {
  font-family: 'K2D';
  font-style: normal;
  font-weight: 400;
  src: local('K2D Regular'), local('K2D-Regular'), url(https://fonts.gstatic.com/s/k2d/v3/J7aTnpF2V0EjfqUsrLc.woff2) format('woff2');
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin */
@font-face {
  font-family: 'K2D';
  font-style: normal;
  font-weight: 400;
  src: local('K2D Regular'), local('K2D-Regular'), url(https://fonts.gstatic.com/s/k2d/v3/J7aTnpF2V0EjcKUs.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

body {
  overflow: scroll;
  margin: 0;
  height: 100%;
  min-height: 100vh;
  background: #333333;
  font-family: 'K2D', sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
}

body {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.container::-webkit-scrollbar { 
    display: none;  /* Safari and Chrome */
}

h1, h2 {
  color: #fafafa;
  font-size: 3.5vh;
}

button {
  visibility: visible;
  display: block;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: 0;
  background-color: var(--button-background);
  border: 0;
  height: 18vh;
  color: #eeeeee;
  border-radius: 16px;
  width: 30vw;
  cursor: pointer;
  font-size: 4.5vw;
  transition-duration: 0.25s;
  text-align: center;
  white-space: normal;
  word-wrap: break-word;
  opacity: 0.8;
  border-radius: 10px;
}

button:focus {
  outline: none;
  outline-style:none;
  box-shadow:none;
  border-color:transparent;
}

button:hover {
  opacity: 1;
}

.swal2-confirm {
  height: 80px !important;
  width: 80% !important;
}

.swal2-cancel {
  background-color: red !important;
  height: 80px !important;
  width: 80% !important;
}

</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>

</html>
