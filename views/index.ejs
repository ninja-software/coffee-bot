<!DOCTYPE html>
<html>
<head>
<title>Coffee Tracker Bot</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<meta name="HandheldFriendly" content="true" />

<link rel="stylesheet" href="res/main.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<nav>
<h1 class="center">Coffee Tracker</h1>

<div class="left">
<h2 id="statistics"></h2>
</div>

<div class="right">
  <a id="hamburger" href="javascript:void(0);" class="icon" onclick=toggle_menu()>
    <i class="fa fa-bars"></i>
  </a>
<div id="options">
<button id="remove" onclick=switch_mode('remove')>Remove</button>
<button id="edit" onclick=switch_mode('edit')>Edit</button>
<button id="add" onclick=switch_mode('add')>Add</button>
<button id="fullscreen" onclick=toggle_fullscreen()>Fullscreen</button>
<button id="cancel" onclick=cancel()>Cancel</button>
</div>
</div>
</nav>
</head>

<body>

<div id="coffee_addicts"></div>

</body>

<script src="/res/lib.js"></script>
<script>

mode = "default"
fullscreen = false
menu_open = false

function toggle_menu() {
  var x = document.getElementById("options");
  var y = document.getElementById("hamburger");
  if (menu_open) {
    x.className = ""
    y.style.display = "block"
    menu_open = false
  } else {
    x.className = "shown";
    y.style.display = "none"
    menu_open = true
  }
}

function set_color(color) {
  document.documentElement.style.setProperty("--button-background", color)
}

function toggle_fullscreen() {
fullscreen = !fullscreen
document.querySelector("#fullscreen").innerText =  fullscreen ? "Unfullscreen" : "Fullscreen"
if (fullscreen) {
document.documentElement.requestFullscreen()
} else {
document.exitFullscreen()
}
}

function switch_mode(new_mode) {
  toggle_menu()
  mode = new_mode
  set_color("#292929")
  if (mode == "remove")set_color("#ed4337")
  if (mode == "add")add(this)
  if (mode == "edit")set_color("#779ecb")
}

function cancel() {
  set_color("#292929")
  mode = "default"
  toggle_menu()
}

function edit_user(button) {
  //new_username = prompt("New username? (Leave blank to keep current)")
  new_real_name = prompt("New real name? (Leave blank to keep current)")
  new_username = ""
  str = [`username=${button.username}`]
  if (new_username) str.push(`new_username=${new_username}`)
  if (new_real_name) str.push(`new_real_name=${new_real_name}`)
  if (str.length > 1) {
    POST("/api/update_user", str.join("&"), (data) => {
      if (!data.success) {error(data.error)} else {
        load()
      }
    })
  } else {
    alert("You must change at least one field!");
  }
}

function add() {
  toggle_menu()
  //username = prompt("What is the username of the person you would like to add?")
  //if (username == null)return
  real_name = prompt("What is the real name of the person you would like to add?")
  username = real_name
  if (real_name == null)return
  POST("/api/new_user", `username=${username}&real_name=${real_name}`, (data) => {
    if (!data.success) {error(data.error)} else {
      load()
    }
  })
}

function remove_user(button) {
  POST("/api/delete_user", `username=${button.username}`, (data) => {
    if (!data.success) {error(data.error)} else {
      load()
    }
  })
}

function handle_click() {
  if (mode == "default") track_coffee(this)
  if (mode == "remove") remove_user(this)
  if (mode == "edit") edit_user(this)
}

function track_coffee(button) {
  POST("/api/drink_coffee", `username=${button.username}`, (data) => {
    if (data.success) {
      refresh_statistics()
      Swal.fire({
        imageUrl: 'https://i.imgur.com/T2pMn7L.gif',
        imageAlt: 'A sizzling coffee',
        title: button.innerText,
        text: data.data.message,
        showCancelButton: true, 
        cancelButtonText: "Undo"  
      }).then((r) => {
        if (r.dismiss == "cancel") {
          POST("/api/remove_last_coffee", `username=${button.username}`, (data) => {
            if (data.success) {
              refresh_statistics()
              Swal.fire({
                icon: "success",
                title: "Undone!"
              })
            } else {
              error(data.error)
            }
          })
        }
      })
    } else {
      error(data.error)
    }
  })
}

coffee_addicts = document.getElementById("coffee_addicts")

function dynamicSort(property) {
    var sortOrder = 1;

    if(property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
    }

    return function (a,b) {
        if(sortOrder == -1){
            return b[property].localeCompare(a[property]);
        }else{
            return a[property].localeCompare(b[property]);
        }        
    }
}

function refresh_statistics() {
  GET("/api/stats", (data) => {
    if (data.success) {
      statistics = document.querySelector("#statistics")
      statistics.innerText = `Coffees today: ${data.stats.coffees_consumed_today}\nAll time: ${data.stats.total_coffees}`
      } else {
      error(data.error)
    }
  })
}

function load() {
  refresh_statistics()
  GET("/api/users", (data) => {
    coffee_addicts.innerHTML = ""
    data.users.sort(dynamicSort("real_name"))
    data.users.map((user) => {
      if (user.hidden)return
      button = document.createElement("button")
      button.innerText = user.real_name
      button.username = user.username
      button.onclick = handle_click
      coffee_addicts.appendChild(button)
    })
  })
}

load()

document.addEventListener('click', function(event) {
  if (event.target.id == "hamburger" || event.target.id == "options" || event.target.parentElement.id == "options")return
  if (menu_open) toggle_menu()
}, false);

</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>

</html>
